// Optimierende Uebersetzer WS 2019/2020 
// Aufgabe 2: Simple Constants
// 11929817, Sigurd Dam Sonniks
// 01425215, Michael Pucher

SET

DOMAIN
    ConstLattice = flat(snum)
    ConstFunc    = VariableId -> ConstLattice 
    ConstTup     = bool * ConstFunc
ENDDOMAIN

PROBLEM sc
    direction:  forward
    carrier:    ConstTup
    init_start: (true, [ -> bot])
    init:       (false, [ -> top])

    equal:      eq
    combine:    comb
    retfunc:    comb
    widening:   comb

TRANSFER

DeclareStmt(symb, type), _:
    let id = varsym_varid(symb);
    in if fst(@)
    then (true, snd(@) \ [id -> top])
    else @;

UndeclareStmt(variables), _:
    (fst(@), undef_vars(variables, snd(@)));

ExprStatement(expr), _:
    transfer(expr, @);

ScopeStatement(WhileStmt(ExprStatement(expr))), true_edge:
    true_transfer(expr, @);

ScopeStatement(WhileStmt(ExprStatement(expr))), false_edge:
    @;

ScopeStatement(IfStmt(ExprStatement(expr))), true_edge:
    true_transfer(expr, @);

ScopeStatement(IfStmt(ExprStatement(expr))), false_edge:
    false_transfer(expr, @);

LogicalIf(expr), true_edge:  true_transfer(expr,@);
LogicalIf(expr), false_edge: false_transfer(expr,@);

_, _: @;

SUPPORT

fst :: ConstTup -> bool;
fst((a,b)) = a;

snd :: ConstTup -> ConstFunc;
snd((a,b)) = b;

is_const :: ConstLattice -> bool;
is_const(top) = false;
is_const(bot) = false;
is_const(_)   = true;

transfer :: Expression, ConstTup -> ConstTup;
transfer(expr, (old_reachability,cf)) =
    case (old_reachability,expr) of
        (false, _)                 => (false, cf);
        (true, AssignOp(a, b))     => (true, (cf \ [varref_varid(a) -> eval(b, cf)]));
        (true, _)                  => (true, cf);
    endcase;

true_transfer :: Expression, ConstTup -> ConstTup;
true_transfer(expr, (old_reachability, cf)) =
    let result = eval(expr, cf);
    in if is_const(result) then 
        let is_true <= result;
        in (if is_true != 0 then (old_reachability, cf) else (false,cf))
    else (old_reachability, cf);
     

false_transfer :: Expression, ConstTup -> ConstTup;
false_transfer(expr, (old_reachability, cf)) =
    let result = eval(expr, cf);
    in if is_const(result) then 
        let is_true <= result;
        in (if is_true = 0 then (old_reachability,cf) else (false,cf))
    else (old_reachability, cf);

add_op :: ConstLattice, ConstLattice -> ConstLattice;
    add_op(a, b) =
        if ((a = bot) || (b = bot)) then bot
        else if ((a = top) || (b = top)) then top
        else let a_val <= a;
                 b_val <= b;
             in lift(a_val + b_val);

sub_op :: ConstLattice, ConstLattice -> ConstLattice;
    sub_op(a, b) =
        if ((a = bot) || (b = bot)) then bot
        else if ((a = top) || (b = top)) then top
        else let a_val <= a;
                 b_val <= b;
             in lift(a_val - b_val);

div_op :: ConstLattice, ConstLattice -> ConstLattice;
    div_op(a, b) =
        if ((a = bot) || (b = bot)) then bot
        else if ((a = top) || (b = top)) then top
        else let a_val <= a;
                 b_val <= b;
             in lift(a_val / b_val);

mul_op :: ConstLattice, ConstLattice -> ConstLattice;
    mul_op(a, b) =
        if ((a = bot) || (b = bot)) then bot
        else if ((a = top) || (b = top)) then top
        else let a_val <= a;
                 b_val <= b;
             in lift(a_val * b_val);

eval :: Expression, ConstFunc -> ConstLattice;
    eval(expr, cf) =
        case expr of
            IntVal(v)             => lift(val-astint(v));
            VarRefExp(_)          => cf{!varref_varid(expr)!};
            AssignInitializer(e)  => eval(e, cf);  
            AddOp(a, b)           =>
                let a_val = eval(a, cf);
                    b_val = eval(b, cf);
                in add_op(a_val, b_val);
            SubtractOp(a, b)      =>
                let a_val = eval(a, cf);
                    b_val = eval(b, cf);
                in sub_op(a_val, b_val);
            MultiplyOp(a, b)      =>
                let a_val = eval(a, cf);
                    b_val = eval(b, cf);
                in mul_op(a_val, b_val);
            IntegerDivideOp(a, b) =>
                let a_val = eval(a, cf);
                    b_val = eval(b, cf);
                in div_op(a_val, b_val);
            DivideOp(a, b)        =>
                let a_val = eval(a, cf);
                    b_val = eval(b, cf);
                in div_op(a_val, b_val);
            _                     => println("warning: unsupported expression in eval: ",
                                             expr_asttext(expr))
                                     bot;
  endcase;

undef_vars :: *VariableSymbolNT, ConstFunc -> ConstFunc;
undef_vars([!], cf) = cf;
undef_vars(v::vs, cf) =
    let id = varsym_varid(v);
    in  undef_vars(vs, cf \ [id -> bot]);

eq :: ConstTup, ConstTup -> bool;
    eq(a, b) = (a = b);

meet :: ConstLattice, ConstLattice -> ConstLattice;
    meet(a, b) = (a glb b);

comb :: ConstTup, ConstTup -> ConstTup;
comb(f,g) =
let fst_f = fst(f);
      fst_g = fst(g);
  in if fst_f && !fst_g then (true, snd(f))
     else if !fst_f && fst_g then (true, snd(g))
     else (fst(f) || fst(g), crunch(snd(f), snd(g), meet));
